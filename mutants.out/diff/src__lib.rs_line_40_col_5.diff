--- src/lib.rs
+++ replace parse_keyframes_block -> Result<(), ParseError<'i, ()>> with Ok(())
@@ -32,57 +32,17 @@
 }
 
 fn parse_keyframes_block<'i>(
     path: &Path,
     keyframes_name: &String,
     results: &mut HashSet<String>,
     input: &mut Parser<'i, '_>,
 ) -> Result<(), ParseError<'i, ()>> {
-    let mut keyframes_values: HashSet<OrderedFloat<f32>> = HashSet::new();
-    let mut key_value = "".to_string();
-
-    while let Ok(token) = input.next() {
-        match token {
-            Token::Percentage {unit_value, ..} => {
-                let cast_unit_v = (*unit_value * 100.0).to_string();
-                if keyframes_values.contains(&OrderedFloat(*unit_value)) {
-                    results.insert(format!(
-                        "@keyframes \"{keyframes_name}\" : the value \"{cast_unit_v}%\" already exist in file \"{}\".",
-                        path.display()
-                    ));
-                }
-
-                keyframes_values.insert(OrderedFloat(*unit_value));
-                if *unit_value == 1.0 {
-                    results.insert(format!(
-                        "@keyframes \"{keyframes_name}\" : the value \"100%\" can be replaced by \"to\" in file \"{}\".",
-                        path.display()
-                    ));
-                }
-            }
-            Token::Ident(value) => {
-                println!("&&& {:?}", value);
-                if *value == "from" {
-                    results.insert(format!(
-                        "@keyframes \"{keyframes_name}\" : the value \"from\" can be replaced by \"0%\" in file \"{}\".",
-                        path.display()
-                    ));
-                }
-                // TODO : value is different than "from", "to" and a percentage.
-            }
-            Token::CurlyBracketBlock => {
-                let _ = input.parse_nested_block(|input| {
-                    parse_keyframe_values_block(path, &keyframes_name, results, input)
-                });
-            }
-            _ => {}
-        }
-    }
-    Ok(())
+    Ok(()) /* ~ changed by cargo-mutants ~ */
 }
 
 pub fn parse_file(
     path: &Path,
     results: &mut HashSet<String>,
 ) -> std::io::Result<()> {
     let contents = fs::read_to_string(path)?;
     let mut input = ParserInput::new(&contents);
